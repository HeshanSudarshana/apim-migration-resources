CREATE TABLE AM_API_CATEGORIES (
  UUID VARCHAR2(50),
  NAME VARCHAR2(255) NOT NULL,
  DESCRIPTION VARCHAR2(1024),
  TENANT_ID INTEGER DEFAULT -1,
  UNIQUE (NAME,TENANT_ID),
  PRIMARY KEY (UUID)
)
/

ALTER TABLE AM_SYSTEM_APPS
ADD TENANT_DOMAIN VARCHAR2(255) DEFAULT 'carbon.super'
/

ALTER TABLE AM_SYSTEM_APPS
DROP UNIQUE (NAME)
/

CREATE TABLE AM_USER (
    USER_ID VARCHAR(255) NOT NULL,
    USER_NAME VARCHAR(255) NOT NULL,
    PRIMARY KEY(USER_ID)
)
/

CREATE TABLE IF NOT EXISTS AM_SECURITY_AUDIT_UUID_MAPPING (
    API_ID INTEGER NOT NULL,
    AUDIT_UUID VARCHAR(255) NOT NULL,
    PRIMARY KEY (API_ID),
    FOREIGN KEY (API_ID) REFERENCES AM_API(API_ID)
)
/

DELETE FROM IDN_OAUTH2_SCOPE_BINDING WHERE SCOPE_BINDING IS NULL /

ALTER TABLE AM_API ADD API_UUID VARCHAR(255) /

ALTER TABLE AM_WORKFLOWS ADD (
  WF_METADATA BLOB DEFAULT NULL NULL,
  WF_PROPERTIES BLOB DEFAULT NULL NULL
)
/

CREATE TABLE AM_GW_PUBLISHED_API_DETAILS (
  API_ID varchar(255) NOT NULL,
  TENANT_DOMAIN varchar(255),
  API_PROVIDER varchar(255),
  API_NAME varchar(255),
  API_VERSION varchar(255),
  PRIMARY KEY (API_ID)
)
/

CREATE TABLE AM_GW_API_ARTIFACTS (
  API_ID varchar(255) NOT NULL,
  ARTIFACT blob,
  GATEWAY_INSTRUCTION varchar(20),
  GATEWAY_LABEL varchar(255),
  TIME_STAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (GATEWAY_LABEL, API_ID),
  FOREIGN KEY (API_ID) REFERENCES AM_GW_PUBLISHED_API_DETAILS(API_ID) ON DELETE CASCADE
)
/

CREATE OR REPLACE TRIGGER update_timestamp
    BEFORE INSERT OR UPDATE ON AM_GW_API_ARTIFACTS
    FOR EACH ROW
BEGIN
    :NEW.TIME_STAMP := systimestamp;
END;
/

ALTER TABLE AM_SUBSCRIPTION ADD TIER_ID_PENDING VARCHAR2(50)
/

ALTER TABLE AM_POLICY_SUBSCRIPTION ADD (
    MAX_COMPLEXITY INTEGER DEFAULT 0 NOT NULL,
    MAX_DEPTH INTEGER DEFAULT 0 NOT NULL
)
/

CREATE TABLE AM_API_RESOURCE_SCOPE_MAPPING (
    SCOPE_NAME VARCHAR(255) NOT NULL,
    URL_MAPPING_ID INTEGER NOT NULL,
    TENANT_ID INTEGER NOT NULL,
    FOREIGN KEY (URL_MAPPING_ID) REFERENCES AM_API_URL_MAPPING(URL_MAPPING_ID) ON DELETE CASCADE,
    PRIMARY KEY(SCOPE_NAME, URL_MAPPING_ID)
)
/

CREATE TABLE AM_SHARED_SCOPE (
     NAME VARCHAR(255),
     UUID VARCHAR (256),
     TENANT_ID INTEGER,
     PRIMARY KEY (UUID)
)
/

ALTER TABLE IDN_OAUTH2_RESOURCE_SCOPE DROP PRIMARY KEY
/

CREATE TABLE AM_KEY_MANAGER (
  UUID VARCHAR(50) NOT NULL,
  NAME VARCHAR(100) NULL,
  DISPLAY_NAME VARCHAR(100) NULL,
  DESCRIPTION VARCHAR(256) NULL,
  TYPE VARCHAR(45) NULL,
  CONFIGURATION BLOB NULL,
  ENABLED CHAR(1) DEFAULT 1,
  TENANT_DOMAIN VARCHAR(100) NULL,
  PRIMARY KEY (UUID),
  UNIQUE (NAME,TENANT_DOMAIN)
)
/

CREATE TABLE AM_TENANT_THEMES (
  TENANT_ID INTEGER NOT NULL,
  THEME BLOB NOT NULL,
  PRIMARY KEY (TENANT_ID)
)
/

CREATE TABLE AM_GRAPHQL_COMPLEXITY (
    UUID VARCHAR(256),
    API_ID INTEGER NOT NULL,
    TYPE VARCHAR(256),
    FIELD VARCHAR(256),
    COMPLEXITY_VALUE INTEGER,
    FOREIGN KEY (API_ID) REFERENCES AM_API(API_ID) ON DELETE CASCADE,
    PRIMARY KEY(UUID),
    UNIQUE (API_ID,TYPE,FIELD)
)
/

UPDATE IDN_OAUTH_CONSUMER_APPS SET CALLBACK_URL='' WHERE CALLBACK_URL IS NULL
/

ALTER TABLE AM_APPLICATION_KEY_MAPPING ADD UUID VARCHAR(50)
/
UPDATE AM_APPLICATION_KEY_MAPPING SET UUID = SYS_GUID() WHERE UUID IS NULL
/
ALTER TABLE AM_APPLICATION_KEY_MAPPING ADD KEY_MANAGER VARCHAR(50) DEFAULT 'Resident Key Manager' NOT NULL
/
ALTER TABLE AM_APPLICATION_KEY_MAPPING ADD APP_INFO BLOB
/
ALTER TABLE AM_APPLICATION_KEY_MAPPING ADD UNIQUE(APPLICATION_ID,KEY_TYPE,KEY_MANAGER)
/
ALTER TABLE AM_APPLICATION_KEY_MAPPING DROP PRIMARY KEY
/

ALTER TABLE AM_APPLICATION_REGISTRATION ADD KEY_MANAGER VARCHAR2(255) DEFAULT 'Resident Key Manager' NOT NULL
/
ALTER TABLE AM_APPLICATION_REGISTRATION ADD UNIQUE(SUBSCRIBER_ID,APP_ID,TOKEN_TYPE,KEY_MANAGER)
/

CREATE TABLE AM_SCOPE (
            SCOPE_ID INTEGER NOT NULL,
            NAME VARCHAR2(255) NOT NULL,
            DISPLAY_NAME VARCHAR2(255) NOT NULL,
            DESCRIPTION VARCHAR2(512),
            TENANT_ID INTEGER DEFAULT -1 NOT NULL,
            SCOPE_TYPE VARCHAR2(255) NOT NULL,
            PRIMARY KEY (SCOPE_ID))
/
CREATE SEQUENCE AM_SCOPE_SEQUENCE START WITH 1 INCREMENT BY 1 NOCACHE
/
CREATE OR REPLACE TRIGGER AM_SCOPE_TRIGGER
		    BEFORE INSERT
            ON AM_SCOPE
            REFERENCING NEW AS NEW
            FOR EACH ROW
            BEGIN
                SELECT AM_SCOPE_SEQUENCE.nextval INTO :NEW.SCOPE_ID FROM dual;
            END;
/
CREATE TABLE AM_SCOPE_BINDING (
            SCOPE_ID INTEGER NOT NULL,
            SCOPE_BINDING VARCHAR2(255) NOT NULL,
            BINDING_TYPE VARCHAR2(255) NOT NULL,
            FOREIGN KEY (SCOPE_ID) REFERENCES AM_SCOPE(SCOPE_ID) ON DELETE CASCADE)
/
ALTER TABLE AM_API ADD API_UUID VARCHAR(255)
/
ALTER TABLE AM_API ADD STATUS VARCHAR(30)
/
ALTER TABLE AM_API ADD REVISIONS_CREATED INTEGER DEFAULT 0
/
ALTER TABLE AM_CERTIFICATE_METADATA ADD CERTIFICATE BLOB DEFAULT NULL
/


CREATE TABLE AM_REVISION (
            ID INTEGER NOT NULL,
            API_UUID VARCHAR(256) NOT NULL,
            REVISION_UUID VARCHAR(255) NOT NULL,
            DESCRIPTION VARCHAR(255),
            CREATED_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            CREATED_BY VARCHAR(255),
            PRIMARY KEY (ID, API_UUID),
            UNIQUE(REVISION_UUID))
/

CREATE TABLE AM_API_REVISION_METADATA (
    API_UUID VARCHAR(64),
    REVISION_UUID VARCHAR(64),
    API_TIER VARCHAR(128),
    UNIQUE (API_UUID,REVISION_UUID)
)
/

CREATE TABLE AM_DEPLOYMENT_REVISION_MAPPING (
            NAME VARCHAR(255) NOT NULL,
            VHOST VARCHAR(255) NULL,
            REVISION_UUID VARCHAR(255) NOT NULL,
            DISPLAY_ON_DEVPORTAL INTEGER DEFAULT 0,
            DEPLOYED_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY (NAME, REVISION_UUID),
            FOREIGN KEY (REVISION_UUID) REFERENCES AM_REVISION(REVISION_UUID) ON DELETE CASCADE)
/

ALTER TABLE AM_API_CLIENT_CERTIFICATE ADD REVISION_UUID VARCHAR(255) DEFAULT 'Current API' NOT NULL
/
ALTER TABLE AM_API_CLIENT_CERTIFICATE DROP PRIMARY KEY
/
ALTER TABLE AM_API_CLIENT_CERTIFICATE ADD PRIMARY KEY(ALIAS,TENANT_ID, REMOVED, REVISION_UUID)
/

ALTER TABLE AM_API_URL_MAPPING ADD REVISION_UUID VARCHAR(256)
/
ALTER TABLE AM_GRAPHQL_COMPLEXITY ADD REVISION_UUID VARCHAR(256)
/
ALTER TABLE AM_API_PRODUCT_MAPPING ADD REVISION_UUID VARCHAR(256)
/
DROP TABLE AM_GW_API_DEPLOYMENTS
/
DROP TABLE AM_GW_API_ARTIFACTS
/
DROP TABLE AM_GW_PUBLISHED_API_DETAILS
/

CREATE TABLE AM_GW_PUBLISHED_API_DETAILS (
  API_ID varchar(255) NOT NULL,
  TENANT_DOMAIN varchar(255),
  API_PROVIDER varchar(255),
  API_NAME varchar(255),
  API_VERSION varchar(255),
  API_TYPE varchar(50),
  PRIMARY KEY (API_ID)
)
/
CREATE TABLE AM_GW_API_ARTIFACTS (
  API_ID varchar(255) NOT NULL,
  REVISION_ID varchar(255) NOT NULL,
  ARTIFACT blob,
  TIME_STAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (REVISION_ID, API_ID),
  FOREIGN KEY (API_ID) REFERENCES AM_GW_PUBLISHED_API_DETAILS(API_ID)
)
/
CREATE TABLE AM_GW_API_DEPLOYMENTS (
  API_ID VARCHAR(255) NOT NULL,
  REVISION_ID VARCHAR(255) NOT NULL,
  LABEL VARCHAR(255) NOT NULL,
  VHOST VARCHAR(255) NULL,
  PRIMARY KEY (REVISION_ID, API_ID,LABEL),
  FOREIGN KEY (API_ID) REFERENCES AM_GW_PUBLISHED_API_DETAILS(API_ID)
)
/

-- Service Catalog --
CREATE TABLE AM_SERVICE_CATALOG (
            UUID VARCHAR(36) NOT NULL,
            SERVICE_KEY VARCHAR(100) NOT NULL,
            MD5 VARCHAR(100) NOT NULL,
            SERVICE_NAME VARCHAR(255) NOT NULL,
            DISPLAY_NAME VARCHAR(255) NOT NULL,
            SERVICE_VERSION VARCHAR(30) NOT NULL,
            TENANT_ID INTEGER NOT NULL,
            SERVICE_URL VARCHAR(2048) NOT NULL,
            DEFINITION_TYPE VARCHAR(20),
            DEFINITION_URL VARCHAR(2048),
            DESCRIPTION VARCHAR(1024),
            SECURITY_TYPE VARCHAR(50),
            MUTUAL_SSL_ENABLED NUMBER(1,0) DEFAULT 0,
            CREATED_TIME TIMESTAMP NULL,
            LAST_UPDATED_TIME TIMESTAMP NULL,
            CREATED_BY VARCHAR(255),
            UPDATED_BY VARCHAR(255),
            SERVICE_DEFINITION BLOB NOT NULL,
            METADATA BLOB NOT NULL,
            PRIMARY KEY (UUID),
            CONSTRAINT SERVICE_KEY_TENANT UNIQUE(SERVICE_KEY, TENANT_ID),
            CONSTRAINT SERVICE_NAME_VERSION_TENANT UNIQUE (SERVICE_NAME, SERVICE_VERSION, TENANT_ID))
/

-- Webhooks --
CREATE TABLE AM_WEBHOOKS_SUBSCRIPTION (
            WH_SUBSCRIPTION_ID INTEGER NOT NULL,
            API_UUID VARCHAR(255) NOT NULL,
            APPLICATION_ID VARCHAR(255) NOT NULL,
            TENANT_DOMAIN VARCHAR(255) NOT NULL,
            HUB_CALLBACK_URL VARCHAR(1024) NOT NULL,
            HUB_TOPIC VARCHAR(255) NOT NULL,
            HUB_SECRET VARCHAR(2048),
            HUB_LEASE_SECONDS INTEGER,
            UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            EXPIRY_AT NUMBER(19),
            DELIVERED_AT TIMESTAMP NULL,
            DELIVERY_STATE INTEGER,
            PRIMARY KEY (WH_SUBSCRIPTION_ID))
/

CREATE SEQUENCE AM_WEBHOOKS_SUBSCRIPTION_SEQ START WITH 1 INCREMENT BY 1 NOCACHE
/

CREATE OR REPLACE TRIGGER AM_WEBHOOKS_SUB_TRIGGER
		    BEFORE INSERT
            ON AM_WEBHOOKS_SUBSCRIPTION
            REFERENCING NEW AS NEW
            FOR EACH ROW
            BEGIN
                SELECT AM_WEBHOOKS_SUBSCRIPTION_SEQ.nextval INTO :NEW.WH_SUBSCRIPTION_ID FROM dual;
            END;
/

CREATE TABLE AM_WEBHOOKS_UNSUBSCRIPTION (
            API_UUID VARCHAR(255) NOT NULL,
            APPLICATION_ID VARCHAR(20) NOT NULL,
            TENANT_DOMAIN VARCHAR(255) NOT NULL,
            HUB_CALLBACK_URL VARCHAR(1024) NOT NULL,
            HUB_TOPIC VARCHAR(255) NOT NULL,
            HUB_SECRET VARCHAR(2048),
            HUB_LEASE_SECONDS INTEGER,
            ADDED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP)
/

CREATE TABLE AM_API_SERVICE_MAPPING (
    API_ID INTEGER NOT NULL,
    SERVICE_KEY VARCHAR(256) NOT NULL,
    MD5 VARCHAR(100) NOT NULL,
    TENANT_ID INTEGER NOT NULL,
    PRIMARY KEY (API_ID, SERVICE_KEY),
    FOREIGN KEY (API_ID) REFERENCES AM_API(API_ID) ON DELETE CASCADE
)
/
-- Gateway Environments Table --
CREATE TABLE AM_GATEWAY_ENVIRONMENT (
            ID INTEGER NOT NULL,
            UUID VARCHAR(45) NOT NULL,
            NAME VARCHAR(255) NOT NULL,
            TENANT_DOMAIN VARCHAR(255),
            DISPLAY_NAME VARCHAR(255) NULL,
            DESCRIPTION VARCHAR(1023) NULL,
            UNIQUE (NAME, TENANT_DOMAIN),
            UNIQUE (UUID),
            PRIMARY KEY (ID))
/
CREATE SEQUENCE AM_GATEWAY_ENV_SEQ START WITH 1 INCREMENT BY 1 NOCACHE
/
CREATE OR REPLACE TRIGGER AM_GATEWAY_ENVIRONMENT_TRIGGER
		    BEFORE INSERT
            ON AM_GATEWAY_ENVIRONMENT
            REFERENCING NEW AS NEW
            FOR EACH ROW
            BEGIN
                SELECT AM_GATEWAY_ENV_SEQ.nextval INTO :NEW.ID FROM dual;
            END;
/

-- Virtual Hosts Table --
CREATE TABLE AM_GW_VHOST (
            GATEWAY_ENV_ID INTEGER,
            HOST VARCHAR(255) NOT NULL,
            HTTP_CONTEXT VARCHAR(255) NULL,
            HTTP_PORT VARCHAR(5) NOT NULL,
            HTTPS_PORT VARCHAR(5) NOT NULL,
            WS_PORT VARCHAR(5) NOT NULL,
            WSS_PORT VARCHAR(5) NOT NULL,
            FOREIGN KEY (GATEWAY_ENV_ID) REFERENCES AM_GATEWAY_ENVIRONMENT(ID) ON DELETE CASCADE,
            PRIMARY KEY (GATEWAY_ENV_ID, HOST))
/

ALTER TABLE AM_POLICY_SUBSCRIPTION ADD CONNECTIONS_COUNT INTEGER DEFAULT 0 NOT NULL
/

ALTER TABLE AM_API_COMMENTS RENAME COLUMN COMMENTED_USER TO CREATED_BY
/
ALTER TABLE AM_API_COMMENTS RENAME COLUMN DATE_COMMENTED TO CREATED_TIME
/
ALTER TABLE AM_API_COMMENTS ADD UPDATED_TIME DATE
/
ALTER TABLE AM_API_COMMENTS ADD PARENT_COMMENT_ID VARCHAR2(255) DEFAULT NULL
/
ALTER TABLE AM_API_COMMENTS ADD ENTRY_POINT VARCHAR2(20)  DEFAULT 'DEVPORTAL'
/
ALTER TABLE AM_API_COMMENTS ADD CATEGORY VARCHAR2(20) DEFAULT 'general'
/
ALTER TABLE AM_API_COMMENTS ADD FOREIGN KEY(PARENT_COMMENT_ID) REFERENCES AM_API_COMMENTS(COMMENT_ID)
/
ALTER TABLE AM_API ADD ORGANIZATION VARCHAR(100);
/
ALTER TABLE AM_APPLICATION ADD ORGANIZATION VARCHAR(100);
/
ALTER TABLE AM_API_CATEGORIES ADD ORGANIZATION VARCHAR(100);
/
ALTER TABLE AM_API_DEFAULT_VERSION ADD ORGANIZATION VARCHAR(100) NULL;
/
ALTER TABLE AM_GATEWAY_ENVIRONMENT ADD ORGANIZATION VARCHAR(100);
/
ALTER TABLE AM_GATEWAY_ENVIRONMENT ADD PROVIDER VARCHAR(255) DEFAULT 'wso2';
/
ALTER TABLE AM_API ADD LOG_LEVEL VARCHAR(255) DEFAULT 'OFF';
/
ALTER TABLE AM_API ADD VERSION_COMPARABLE VARCHAR(15);
/
ALTER TABLE AM_KEY_MANAGER ADD EXTERNAL_REFERENCE_ID VARCHAR(100) DEFAULT NULL;
/
ALTER TABLE AM_KEY_MANAGER RENAME COLUMN TENANT_DOMAIN TO ORGANIZATION;
/
ALTER TABLE AM_KEY_MANAGER ADD TOKEN_TYPE VARCHAR(45) DEFAULT 'DIRECT';
/
ALTER TABLE AM_API_REVISION_METADATA MODIFY REVISION_UUID VARCHAR(255);
/
ALTER TABLE AM_BLOCK_CONDITIONS RENAME COLUMN VALUE TO BLOCK_CONDITION;
/
ALTER TABLE AM_APPLICATION_ATTRIBUTES RENAME COLUMN VALUE TO APP_ATTRIBUTE;
/
ALTER TABLE AM_API ADD GATEWAY_VENDOR VARCHAR(100) DEFAULT 'wso2';
/

CREATE TABLE AM_SYSTEM_CONFIGS
(
  ORGANIZATION     VARCHAR(100)            NOT NULL,
  CONFIG_TYPE      VARCHAR(100)            NOT NULL,
  CONFIGURATION    BLOB                    NOT NULL,
  PRIMARY KEY (ORGANIZATION,CONFIG_TYPE)
)
/

CREATE TABLE AM_OPERATION_POLICY (
    POLICY_UUID VARCHAR(45) NOT NULL,
    POLICY_NAME VARCHAR(300) NOT NULL,
    POLICY_VERSION VARCHAR(45) DEFAULT 'v1',
    DISPLAY_NAME VARCHAR(300) NOT NULL,
    POLICY_DESCRIPTION VARCHAR(1024),
    APPLICABLE_FLOWS VARCHAR(45) NOT NULL,
    GATEWAY_TYPES VARCHAR(45) NOT NULL,
    API_TYPES VARCHAR(45) NOT NULL,
    POLICY_PARAMETERS blob,
    ORGANIZATION VARCHAR(100),
    POLICY_CATEGORY VARCHAR(45) NOT NULL,
    POLICY_MD5 VARCHAR(45) NOT NULL,
    PRIMARY KEY(POLICY_UUID)
)
/

CREATE TABLE AM_OPERATION_POLICY_DEFINITION (
   DEFINITION_ID INTEGER,
   POLICY_UUID VARCHAR(45) NOT NULL,
   POLICY_DEFINITION blob NOT NULL,
   GATEWAY_TYPE VARCHAR(20) NOT NULL,
   DEFINITION_MD5 VARCHAR(45) NOT NULL,
   UNIQUE (POLICY_UUID, GATEWAY_TYPE),
   FOREIGN KEY (POLICY_UUID) REFERENCES AM_OPERATION_POLICY(POLICY_UUID) ON DELETE CASCADE,
   PRIMARY KEY(DEFINITION_ID)
)
/

CREATE SEQUENCE AM_OPERATION_POLICY_DEFINITION_SEQ START WITH 1 INCREMENT BY 1
/

CREATE OR REPLACE TRIGGER AM_OPERATION_POLICY_DEFINITION_SEQ
		            BEFORE INSERT
                    ON AM_OPERATION_POLICY_DEFINITION
                    REFERENCING NEW AS NEW
                    FOR EACH ROW
                    BEGIN
                    SELECT AM_OPERATION_POLICY_DEFINITION_SEQ.nextval INTO :NEW.DEFINITION_ID FROM dual;
                    END;
/

CREATE TABLE AM_COMMON_OPERATION_POLICY (
   COMMON_POLICY_ID INTEGER,
   POLICY_UUID VARCHAR(45) NOT NULL,
   FOREIGN KEY (POLICY_UUID) REFERENCES AM_OPERATION_POLICY(POLICY_UUID) ON DELETE CASCADE,
   PRIMARY KEY(COMMON_POLICY_ID)
)
/

CREATE SEQUENCE AM_COMMON_OPERATION_POLICY_SEQ START WITH 1 INCREMENT BY 1
/

CREATE OR REPLACE TRIGGER AM_COMMON_OPERATION_POLICY_SEQ
		            BEFORE INSERT
                    ON AM_COMMON_OPERATION_POLICY
                    REFERENCING NEW AS NEW
                    FOR EACH ROW
                    BEGIN
                    SELECT AM_COMMON_OPERATION_POLICY_SEQ.nextval INTO :NEW.COMMON_POLICY_ID FROM dual;
                    END;
/

CREATE TABLE AM_API_OPERATION_POLICY (
   API_SPECIFIC_POLICY_ID INTEGER,
   POLICY_UUID VARCHAR(45) NOT NULL,
   API_UUID VARCHAR(45) NOT NULL,
   REVISION_UUID VARCHAR(45),
   CLONED_POLICY_UUID VARCHAR(45),
   FOREIGN KEY (POLICY_UUID) REFERENCES AM_OPERATION_POLICY(POLICY_UUID) ON DELETE CASCADE,
   PRIMARY KEY(API_SPECIFIC_POLICY_ID)
)
/

CREATE SEQUENCE AM_API_OPERATION_POLICY_SEQ START WITH 1 INCREMENT BY 1
/

CREATE OR REPLACE TRIGGER AM_API_OPERATION_POLICY_SEQ
		            BEFORE INSERT
                    ON AM_API_OPERATION_POLICY
                    REFERENCING NEW AS NEW
                    FOR EACH ROW
                    BEGIN
                    SELECT AM_API_OPERATION_POLICY_SEQ.nextval INTO :NEW.API_SPECIFIC_POLICY_ID FROM dual;
                    END;
/

CREATE TABLE AM_API_OPERATION_POLICY_MAPPING (
   OPERATION_POLICY_MAPPING_ID INTEGER,
   URL_MAPPING_ID INTEGER NOT NULL,
   POLICY_UUID VARCHAR(45) NOT NULL,
   POLICY_ORDER INTEGER NOT NULL,
   DIRECTION VARCHAR(10) NOT NULL,
   PARAMETERS VARCHAR(1024) NOT NULL,
   FOREIGN KEY (URL_MAPPING_ID) REFERENCES AM_API_URL_MAPPING(URL_MAPPING_ID) ON DELETE CASCADE,
   FOREIGN KEY (POLICY_UUID) REFERENCES AM_OPERATION_POLICY(POLICY_UUID) ON DELETE CASCADE,
   PRIMARY KEY(OPERATION_POLICY_MAPPING_ID)
)
/

CREATE SEQUENCE AM_API_OPERATION_POLICY_MAPPING_SEQ START WITH 1 INCREMENT BY 1
/

CREATE OR REPLACE TRIGGER AM_API_OPERATION_POLICY_MAPPING_SEQ
		            BEFORE INSERT
                    ON AM_API_OPERATION_POLICY_MAPPING
                    REFERENCING NEW AS NEW
                    FOR EACH ROW
                    BEGIN
                    SELECT AM_API_OPERATION_POLICY_MAPPING_SEQ.nextval INTO :NEW.OPERATION_POLICY_MAPPING_ID FROM dual;
                    END;
/

CREATE TABLE AM_DEPLOYED_REVISION (
            NAME VARCHAR(255) NOT NULL,
            VHOST VARCHAR(255) NULL,
            REVISION_UUID VARCHAR(255) NOT NULL,
            DEPLOYED_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY (NAME, REVISION_UUID),
            FOREIGN KEY (REVISION_UUID) REFERENCES AM_REVISION(REVISION_UUID) ON DELETE CASCADE)
/

CREATE TABLE AM_API_ENVIRONMENT_KEYS
(
    UUID            VARCHAR(45)  NOT NULL,
    ENVIRONMENT_ID  VARCHAR(45)  NOT NULL,
    API_UUID        VARCHAR(256) NOT NULL,
    PROPERTY_CONFIG BLOB DEFAULT NULL,
    UNIQUE (ENVIRONMENT_ID, API_UUID),
    FOREIGN KEY (API_UUID) REFERENCES AM_API (API_UUID) ON DELETE CASCADE,
    PRIMARY KEY (UUID)
)
/
commit;
